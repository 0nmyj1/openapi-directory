{
  "basePath": "/v1.0",
  "definitions": {
    "Business": {
      "properties": {
        "imageUrl": {
          "description": "A 320 x 80 pixel logo for the business - displayed on app home screen",
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "imageUrl"
      ]
    },
    "Campaign": {
      "properties": {
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "reference",
        "name",
        "startDate",
        "endDate"
      ]
    },
    "CampaignNew": {
      "properties": {
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "CampaignShort": {
      "properties": {
        "name": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "reference",
        "name"
      ]
    },
    "CampaignUpdate": {
      "properties": {
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CampaignVShort": {
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "Client": {
      "properties": {
        "canAddComments": {
          "type": "boolean"
        },
        "canEditEquipment": {
          "description": "If this is set then \"equipment\" can be set for the Location",
          "type": "boolean"
        },
        "canOrderEquipment": {
          "description": "If this is set then \"equipmentOrderChoices\" can be set for the Location",
          "type": "boolean"
        },
        "canSetStatus": {
          "description": "If this is set then locationStatusChoices will also be populated",
          "type": "boolean"
        },
        "defaultLocationRange": {
          "description": "The default range in metres that will show a location as 'Nearby' in the mobile app. Typical value: 500 metres.",
          "format": "int32",
          "type": "integer"
        },
        "imageUrl": {
          "description": "The url of an image for the Client. Not used at present.",
          "type": "string"
        },
        "locationStatusChoices": {
          "description": "Semicolon-separated list of location status choices - only used if canSetStatus is set",
          "type": "string"
        },
        "locationStatusMaxSelect": {
          "description": "Maximum number of location statuses that must be selected. Typical value 1 (ie select just 1).",
          "format": "int32",
          "type": "integer"
        },
        "locationStatusMinSelect": {
          "description": "Minimum number of location statuses that must be selected. Typical value 1.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "photoResolution": {
          "description": "The resolution for all photos for this client. Examples: '1024x768', '1600x1200', '1920x1440', '2560x1920'",
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "name",
        "imageUrl",
        "defaultLocationRange",
        "photoResolution",
        "canSetStatus",
        "canAddComments",
        "canEditEquipment",
        "canOrderEquipment",
        "locationStatusChoices",
        "locationStatusMinSelect",
        "locationStatusMaxSelect"
      ]
    },
    "ClientNew": {
      "properties": {
        "canAddComments": {
          "type": "boolean"
        },
        "canEditEquipment": {
          "description": "If this is set then \"equipment\" can be set for the Location. Default: false",
          "type": "boolean"
        },
        "canOrderEquipment": {
          "description": "If this is set then \"equipmentOrderChoices\" can be set for the Location. Default: false",
          "type": "boolean"
        },
        "canSetStatus": {
          "description": "If this is set then locationStatusChoices will also be populated. Default: false",
          "type": "boolean"
        },
        "defaultLocationRange": {
          "description": "The default range in metres that will show a location as 'Nearby' in the mobile app. Default: 500",
          "format": "int32",
          "type": "integer"
        },
        "imageUrl": {
          "description": "The url of an image for the Client. Not used at present.",
          "type": "string"
        },
        "locationStatusChoices": {
          "description": "Semicolon-separated list of location status choices - only used if canSetStatus is set",
          "type": "string"
        },
        "locationStatusMaxSelect": {
          "description": "Maximum number of location statuses that must be selected. Typical value 1 (ie select just 1).",
          "format": "int32",
          "type": "integer"
        },
        "locationStatusMinSelect": {
          "description": "Minimum number of location statuses that must be selected. Typical value 1.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "photoResolution": {
          "description": "The resolution for all photos for this client. Either \"1024x768\" or \"2592×1936\". Default: 1024x768",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "ClientShort": {
      "properties": {
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "name"
      ]
    },
    "ClientUpdate": {
      "properties": {
        "canAddComments": {
          "type": "boolean"
        },
        "canEditEquipment": {
          "description": "If this is set then \"equipment\" can be set for the Location. Default: false",
          "type": "boolean"
        },
        "canOrderEquipment": {
          "description": "If this is set then \"equipmentOrderChoices\" can be set for the Location. Default: false",
          "type": "boolean"
        },
        "canSetStatus": {
          "description": "If this is set then locationStatusChoices will also be populated. Default: false",
          "type": "boolean"
        },
        "defaultLocationRange": {
          "description": "The default range in metres that will show a location as 'Nearby' in the mobile app. Default: 500",
          "format": "int32",
          "type": "integer"
        },
        "imageUrl": {
          "description": "The url of an image for the Client. Not used at present.",
          "type": "string"
        },
        "locationStatusChoices": {
          "description": "Semicolon-separated list of location status choices - only used if canSetStatus is set",
          "type": "string"
        },
        "locationStatusMaxSelect": {
          "description": "Maximum number of location statuses that must be selected. Typical value 1 (ie select just 1).",
          "format": "int32",
          "type": "integer"
        },
        "locationStatusMinSelect": {
          "description": "Minimum number of location statuses that must be selected. Typical value 1.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "photoResolution": {
          "description": "The resolution for all photos for this client. Either \"1024x768\" or \"2592×1936\". Default: 1024x768",
          "type": "string"
        }
      }
    },
    "Clients": {
      "properties": {
        "ClientsArray": {
          "items": {
            "$ref": "#/definitions/Client"
          },
          "type": "array"
        }
      },
      "required": [
        "ClientsArray"
      ]
    },
    "Location": {
      "properties": {
        "address0": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        },
        "equipment": {
          "type": "string"
        },
        "equipmentOrderChoices": {
          "type": "string"
        },
        "lat": {
          "format": "double",
          "type": "number"
        },
        "lng": {
          "format": "double",
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "postCode": {
          "type": "string"
        },
        "range": {
          "format": "int32",
          "type": "integer"
        },
        "reference": {
          "type": "string"
        },
        "telephoneNumber": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "reference",
        "name",
        "lat",
        "lng",
        "range",
        "address0",
        "address1",
        "address2",
        "address3",
        "postCode",
        "telephoneNumber",
        "equipment",
        "equipmentOrderChoices"
      ]
    },
    "LocationNew": {
      "properties": {
        "address0": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        },
        "equipment": {
          "description": "If Client.canEditEquipment is set then can set this. Equipment is displayed in-app for editing the quantities. Format: equipment item1^number1|equipment item2^number2. Example: 6 Sheets^4|Shelf Ends^10|Hangers^24",
          "type": "string"
        },
        "equipmentOrderChoices": {
          "description": "If Client.canOrderEquipment is set then can set this. EquipmentOrderChoices are displayed in app for ordering equipment. Format: equipment group1^equipment item1^equipment item1|equipment group2^equipment item3^equipment item4. Example: POS^POS Unit Cover^POS Hanger^POS Stickers|Shelf Edges^Hangers^Cards",
          "type": "string"
        },
        "lat": {
          "format": "double",
          "type": "number"
        },
        "lng": {
          "format": "double",
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "postCode": {
          "type": "string"
        },
        "range": {
          "format": "int32",
          "type": "integer"
        },
        "reference": {
          "type": "string"
        },
        "telephoneNumber": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "lat",
        "lng"
      ]
    },
    "LocationShort": {
      "properties": {
        "name": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "reference",
        "name"
      ]
    },
    "LocationUpdate": {
      "properties": {
        "address0": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        },
        "equipment": {
          "type": "string"
        },
        "equipmentOrderChoices": {
          "type": "string"
        },
        "lat": {
          "format": "double",
          "type": "number"
        },
        "lng": {
          "format": "double",
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "postCode": {
          "type": "string"
        },
        "range": {
          "format": "int32",
          "type": "integer"
        },
        "reference": {
          "type": "string"
        },
        "telephoneNumber": {
          "type": "string"
        }
      }
    },
    "LocationVShort": {
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "Login": {
      "properties": {
        "Business": {
          "$ref": "#/definitions/Business"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "description": "user's name",
          "type": "string"
        },
        "token": {
          "description": "token for all future API requests - passed in the Authorisation header",
          "type": "string"
        }
      },
      "required": [
        "token",
        "name",
        "email",
        "Business"
      ]
    },
    "Logout": {
      "properties": {
        "token": {
          "description": "this will be set to null",
          "type": "string"
        }
      },
      "required": [
        "token"
      ]
    },
    "NewUUID": {
      "properties": {
        "uuid": {
          "description": "the UUID of the newly created object",
          "type": "string"
        }
      },
      "required": [
        "uuid"
      ]
    },
    "Photo": {
      "properties": {
        "PhotoTag": {
          "$ref": "#/definitions/PhotoTagShort"
        },
        "Visit": {
          "$ref": "#/definitions/VisitShort"
        },
        "url": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "url",
        "PhotoTag",
        "Visit"
      ]
    },
    "PhotoTag": {
      "properties": {
        "isRequired": {
          "description": "flag to indicate whether the user must take this photo type to complete a visit",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "orientation": {
          "description": "\"landscape\", \"portrait\" or \"any\"",
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "sortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "name",
        "prefix",
        "orientation",
        "isRequired",
        "sortOrder"
      ]
    },
    "PhotoTagNew": {
      "properties": {
        "isRequired": {
          "description": "flag to indicate whether the user must take this photo type to complete a visit. Default: false",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "orientation": {
          "description": "The desired photo orientation. Must be one of \"landscape\", \"portrait\" or \"any\"",
          "type": "string"
        },
        "prefix": {
          "description": "Prefix is the string that will start the photo filename when the photos are downloaded. Normally the prefix is unique for each photo type you want - but this is not required.",
          "type": "string"
        },
        "sortOrder": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "prefix",
        "orientation"
      ]
    },
    "PhotoTagShort": {
      "properties": {
        "isRequired": {
          "description": "flag to indicate whether the user must take this photo type to complete a visit",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "orientation": {
          "description": "\"landscape\", \"portrait\" or \"any\"",
          "type": "string"
        },
        "prefix": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "prefix",
        "orientation",
        "isRequired"
      ]
    },
    "PhotoTagUpdate": {
      "properties": {
        "isRequired": {
          "description": "flag to indicate whether the user must take this photo type to complete a visit. Default: false",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "orientation": {
          "description": "The desired photo orientation. Must be one of \"landscape\", \"portrait\" or \"any\"",
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "sortOrder": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Role": {
      "properties": {
        "canAccessAllClients": {
          "description": "flag to indicate whether the user can access all clients or just the clients listed in the Clients array",
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "name",
        "description",
        "canAccessAllClients"
      ]
    },
    "RoleShort": {
      "properties": {
        "canAccessAllClients": {
          "description": "flag to indicate whether the user can access all clients or just the clients listed in the Clients array",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "name",
        "canAccessAllClients"
      ]
    },
    "SurveyQuestion": {
      "properties": {
        "choices": {
          "description": "Semicolon-separated list of choices. Only required if type is \"multiselect\".",
          "type": "string"
        },
        "isRequired": {
          "description": "flag to indicate whether the user must answer this question to complete the visit",
          "type": "boolean"
        },
        "maxSelect": {
          "format": "int32",
          "type": "integer"
        },
        "minSelect": {
          "format": "int32",
          "type": "integer"
        },
        "question": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "sortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "One of: \"text\", \"multiselect\", \"number\", \"date\", \"time\", \"dateTime\". If \"multiselect\" then choices, minSelect and maxSelect must also be set.",
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "reference",
        "question",
        "sortOrder",
        "type",
        "choices",
        "minSelect",
        "maxSelect",
        "isRequired"
      ]
    },
    "SurveyQuestionNew": {
      "properties": {
        "choices": {
          "description": "Semicolon-separated list of choices. Only required if type is \"multiselect\".",
          "type": "string"
        },
        "isRequired": {
          "description": "flag to indicate whether the user must answer this question to complete the visit",
          "type": "boolean"
        },
        "maxSelect": {
          "format": "int32",
          "type": "integer"
        },
        "minSelect": {
          "format": "int32",
          "type": "integer"
        },
        "question": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "sortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "One of: \"text\", \"multiselect\", \"number\", \"date\", \"time\", \"dateTime\". If \"multiselect\" then choices, minSelect and maxSelect must also be set.",
          "type": "string"
        }
      },
      "required": [
        "question",
        "sortOrder",
        "type"
      ]
    },
    "SurveyQuestionUpdate": {
      "properties": {
        "choices": {
          "description": "Semicolon-separated list of choices. Only required if type is \"multiselect\".",
          "type": "string"
        },
        "isRequired": {
          "description": "flag to indicate whether the user must answer this question to complete the visit",
          "type": "boolean"
        },
        "maxSelect": {
          "format": "int32",
          "type": "integer"
        },
        "minSelect": {
          "format": "int32",
          "type": "integer"
        },
        "question": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "sortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "One of: \"text\", \"multiselect\", \"number\", \"date\", \"time\", \"dateTime\". If \"multiselect\" then choices, minSelect and maxSelect must also be set.",
          "type": "string"
        }
      }
    },
    "SurveySection": {
      "properties": {
        "SurveyQuestions": {
          "items": {
            "$ref": "#/definitions/SurveyQuestion"
          },
          "type": "array"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "sortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "reference",
        "name",
        "startDate",
        "endDate",
        "sortOrder",
        "SurveyQuestions"
      ]
    },
    "SurveySectionNew": {
      "properties": {
        "SurveyQuestions": {
          "items": {
            "$ref": "#/definitions/SurveyQuestionNew"
          },
          "type": "array"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "sortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "SurveySectionUpdate": {
      "properties": {
        "SurveyQuestions": {
          "items": {
            "$ref": "#/definitions/SurveyQuestionUpdate"
          },
          "type": "array"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "sortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UUID1": {
      "properties": {
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid"
      ]
    },
    "UUID2": {
      "properties": {
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid"
      ]
    },
    "UUID3": {
      "properties": {
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid"
      ]
    },
    "User": {
      "properties": {
        "Clients": {
          "items": {
            "$ref": "#/definitions/ClientShort"
          },
          "type": "array"
        },
        "Role": {
          "$ref": "#/definitions/RoleShort"
        },
        "email": {
          "description": "Email address must be unique for all users.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "name",
        "email",
        "Role"
      ]
    },
    "UserNew": {
      "properties": {
        "clientUUIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "email": {
          "description": "Email address must be unique for all users.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "roleUUID": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "email",
        "password",
        "roleUUID"
      ]
    },
    "UserShort": {
      "properties": {
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "name"
      ]
    },
    "UserUpdate": {
      "properties": {
        "clientUUIDs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "email": {
          "description": "Email address must be unique for all users.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "roleUUID": {
          "type": "string"
        }
      }
    },
    "UserVShort": {
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "Visit": {
      "properties": {
        "Campaign": {
          "$ref": "#/definitions/CampaignShort"
        },
        "Location": {
          "$ref": "#/definitions/LocationShort"
        },
        "User": {
          "$ref": "#/definitions/UserShort"
        },
        "actualEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "actualStartDate": {
          "format": "date-time",
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "scheduleEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "scheduleStartDate": {
          "format": "date-time",
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "reference",
        "scheduleStartDate",
        "scheduleEndDate",
        "actualStartDate",
        "actualEndDate",
        "Location",
        "Campaign",
        "User"
      ]
    },
    "VisitNew": {
      "properties": {
        "Campaign": {
          "$ref": "#/definitions/UUID2"
        },
        "Location": {
          "$ref": "#/definitions/UUID1"
        },
        "User": {
          "$ref": "#/definitions/UUID3"
        },
        "reference": {
          "type": "string"
        },
        "scheduleEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "scheduleStartDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "reference",
        "Location",
        "Campaign",
        "User"
      ]
    },
    "VisitShort": {
      "properties": {
        "Campaign": {
          "$ref": "#/definitions/CampaignVShort"
        },
        "Location": {
          "$ref": "#/definitions/LocationVShort"
        },
        "User": {
          "$ref": "#/definitions/UserVShort"
        },
        "actualEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "actualEndDate",
        "Location",
        "Campaign",
        "User"
      ]
    },
    "VisitUpdate": {
      "properties": {
        "Campaign": {
          "$ref": "#/definitions/UUID2"
        },
        "Location": {
          "$ref": "#/definitions/UUID1"
        },
        "User": {
          "$ref": "#/definitions/UUID3"
        },
        "reference": {
          "type": "string"
        },
        "scheduleEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "scheduleStartDate": {
          "format": "date-time",
          "type": "string"
        }
      }
    }
  },
  "host": "api.popcheckapp.com",
  "info": {
    "description": "This is the API specification for servers. The API supports logging in an API user, getting, setting and deleting the relevant content (clients, campaigns, sites, surveys, visits, photos etc) for the business.<br/><br/>The endpoint is https://api.popcheckapp.com/v1.0/<br/><br/>A typical flow is:<br/>1. POST to /login to get a token for the API user<br/>2. GET to /clients to get the list of clients and the client UUIDs<br/>3. GET/POST/PUT/DELETE to the various endpoints to get / set the required data - with the relevant client UUID appended to the URL<br/><br/>Note on dates: All dates from the server / sent to the server are ISO-8601 with format: \"YYYY-MM-DDTHH:mm:ss.sssZ\". To get this using Javascript call 'var d = new Date(); var n = d.toIsoString();'<br/><br/>Note on IDs: All objects are uniquely identified using a UUID (Universally Unique ID). For more information on UUIDs see <a style='color:grey;' target='_blank' href='http://en.wikipedia.org/wiki/Globally_unique_identifier'>http://en.wikipedia.org/wiki/Globally_unique_identifier</a>.",
    "title": "POP Check App API: Servers",
    "version": "1.0",
    "x-logo": {
      "url": "https://www.popcheckapp.com/assets/images/logo/logo262x50.png"
    },
    "x-origin": {
      "format": "swagger",
      "url": "https://www.popcheckapp.com/api/serverAPI.json",
      "version": "2.0"
    },
    "x-providerName": "popcheckapp.com",
    "x-serviceName": "server"
  },
  "paths": {
    "/campaigns/{campaignUUID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a campaign.",
        "parameters": [
          {
            "description": "UUID of the Campaign",
            "in": "path",
            "name": "campaignUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Delete a campaign",
        "tags": [
          "campaigns"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update some or all elements of the campaign data.",
        "parameters": [
          {
            "description": "UUID of the Campaign",
            "in": "path",
            "name": "campaignUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "Campaign update object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CampaignUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Update campaign data",
        "tags": [
          "campaigns"
        ]
      }
    },
    "/campaigns/{clientUUID}": {
      "get": {
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Campaign"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Invalid token"
          }
        },
        "summary": "Get all the campaigns for the client.",
        "tags": [
          "campaigns"
        ]
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Create a new campaign for the client. Note: startDate and endDate are not typically needed - the Visit object is used to specify when the campaign is in use. The startDate and endDate are useful where there are a lot (over 1,000) campaigns for a client - to make viewing easier in the CMS.",
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "Campaign post object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CampaignNew"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NewUUID"
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Create a new campaign for the client",
        "tags": [
          "campaigns"
        ]
      }
    },
    "/clients": {
      "get": {
        "description": "The clients request is often used as the first request to identify which client the subsequent requests will work on.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Client"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Invalid token"
          }
        },
        "summary": "Get all the clients for this business",
        "tags": [
          "clients"
        ]
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Create a new client for the business",
        "parameters": [
          {
            "description": "Client post object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientNew"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NewUUID"
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Create a new client for the business",
        "tags": [
          "clients"
        ]
      }
    },
    "/clients/{clientUUID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a client. Note: all data associated with a client such as photos and locations will not be available once a client is deleted.",
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Delete a client",
        "tags": [
          "clients"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update some or all elements of the client data.",
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "Client update object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Update client data",
        "tags": [
          "clients"
        ]
      }
    },
    "/locations/{clientUUID}": {
      "get": {
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Location"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Invalid token"
          }
        },
        "summary": "Get all the locations (sites) for the client.",
        "tags": [
          "locations"
        ]
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Create one or more new locations for the client. The only required fields are name, lat and lng. Note: equipment and equipmentOrderChoices are only used if the client was created with canEditEquipment and canOrderEquipment set.<br/>To create multiple locations in a single request simply pass an array of location objects in the body.",
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "Location post object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LocationNew"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NewUUID"
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Create one or more new locations (sites) for the client",
        "tags": [
          "locations"
        ]
      }
    },
    "/locations/{clientUUID}/actions/all": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete all locations (sites) for this client.",
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Delete all locations (sites)",
        "tags": [
          "locations"
        ]
      }
    },
    "/locations/{locationUUID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a location (site).",
        "parameters": [
          {
            "description": "UUID of the Location",
            "in": "path",
            "name": "locationUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Delete a location (site)",
        "tags": [
          "locations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update some or all elements of one or more locations (sites) data.<br/>To update multiple locations in a single request simply pass an array of location objects in the body.",
        "parameters": [
          {
            "description": "UUID of the Location",
            "in": "path",
            "name": "locationUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "Location update object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LocationUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Update one or more locations (sites) data",
        "tags": [
          "locations"
        ]
      }
    },
    "/login": {
      "delete": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "description": "Logs out a user. Normally not required - server can just delete the token locally.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Logout"
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Logout a user",
        "tags": [
          "login"
        ]
      },
      "get": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "description": "This request validates a token and returns the same data as the POST request",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Login"
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Validate a token",
        "tags": [
          "login"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "description": "This request returns a token which is then used in the header for all future api requests. The token remains valid for 1 month. The token is passed in the header as \"Authorization: Bearer &lt;token&gt;\".",
        "parameters": [
          {
            "description": "User's email address",
            "in": "formData",
            "name": "email",
            "required": true,
            "type": "string"
          },
          {
            "description": "User's password",
            "in": "formData",
            "name": "password",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Login"
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "New login request for a user - to get an authorisation token",
        "tags": [
          "login"
        ]
      }
    },
    "/photoTags/{clientUUID}": {
      "get": {
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/PhotoTag"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Invalid token"
          }
        },
        "summary": "Get all the photoTags for the client.",
        "tags": [
          "photoTags"
        ]
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Create one or more new photoTags for the client.<br/>To create multiple photoTags in a single request simply pass an array of photoTag objects in the body.",
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "PhotoTag post object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhotoTagNew"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NewUUID"
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Create one or more new photoTags for the client",
        "tags": [
          "photoTags"
        ]
      }
    },
    "/photoTags/{clientUUID}/actions/all": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete all photoTag for this client.",
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Delete all photoTags",
        "tags": [
          "photoTags"
        ]
      }
    },
    "/photoTags/{photoTagUUID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a photoTag.",
        "parameters": [
          {
            "description": "UUID of the PhotoTag",
            "in": "path",
            "name": "photoTagUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Delete a photoTag",
        "tags": [
          "photoTags"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update some or all elements of one or more photoTags data.<br/>To update multiple photoTags in a single request simply pass an array of photoTag objects in the body.",
        "parameters": [
          {
            "description": "UUID of the PhotoTag",
            "in": "path",
            "name": "photoTagUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "PhotoTag update object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhotoTagUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Update one or more photoTags data",
        "tags": [
          "photoTags"
        ]
      }
    },
    "/photos/{clientUUID}": {
      "get": {
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional photo tag uuid",
            "in": "query",
            "name": "photoTagUUID",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional location (site) uuid",
            "in": "query",
            "name": "locationUUID",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional campaign uuid",
            "in": "query",
            "name": "campaignUUID",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional user uuid",
            "in": "query",
            "name": "userUUID",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional visit schedule start date. If supplied, end date must also be supplied.",
            "format": "date-time",
            "in": "query",
            "name": "scheduleStartDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional visit schedule end date",
            "format": "date-time",
            "in": "query",
            "name": "scheduleEndDate",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Photo"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Invalid token"
          }
        },
        "summary": "Get all the photos for the client.",
        "tags": [
          "photos"
        ]
      }
    },
    "/photos/{photoUUID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a photo.",
        "parameters": [
          {
            "description": "UUID of the Photo",
            "in": "path",
            "name": "photoUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Delete a photo",
        "tags": [
          "photos"
        ]
      }
    },
    "/roles": {
      "get": {
        "description": "If you are creating new users you'll need to know the possible roles you can use for the clients by calling get on the /roles endpoint.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Role"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Invalid token"
          }
        },
        "summary": "Get all the roles for this business",
        "tags": [
          "roles"
        ]
      }
    },
    "/surveySections/{clientUUID}": {
      "get": {
        "description": "The survey sections and associated survey questions are returned in this get request.",
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/SurveySection"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Invalid token"
          }
        },
        "summary": "Get all the survey sections and survey questions for each survey section for the client.",
        "tags": [
          "surveySections"
        ]
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Create a new survey section and survey questions for the client.",
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "SurveySection post object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SurveySectionNew"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NewUUID"
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Create a new survey section and survey questions for the client",
        "tags": [
          "surveySections"
        ]
      }
    },
    "/surveySections/{surveySectionUUID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a survey section and all associated survey questions.",
        "parameters": [
          {
            "description": "UUID of the SurveySection",
            "in": "path",
            "name": "surveySectionUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Delete a survey section and associated survey questions",
        "tags": [
          "surveySections"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update some or all elements of the surveySection and / or surveyQuestion data.",
        "parameters": [
          {
            "description": "UUID of the SurveySection",
            "in": "path",
            "name": "surveySectionUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "SurveySection update object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SurveySectionUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Update surveySection and / or surveyQuestion data",
        "tags": [
          "surveySections"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Returns the list of users for the Business.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Invalid token"
          }
        },
        "summary": "Get all the users for this business. Note that the user's role is also returned. If canAccessAllClients in Role is set then this user has permission to access all clients. Else the Clients will be returned that this client can access.",
        "tags": [
          "users"
        ]
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Create a new user for the business. Note: clientUUIDs only set if Role.canAccessAllClients is false for the roleUUID sent with the POST request.",
        "parameters": [
          {
            "description": "User post object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserNew"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NewUUID"
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Create a new user for the business",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{userUUID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a user. Note: all users apart from the API user that is logged in to the account can be deleted.",
        "parameters": [
          {
            "description": "UUID of the User",
            "in": "path",
            "name": "userUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Delete a user",
        "tags": [
          "users"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update some or all elements of the user data.",
        "parameters": [
          {
            "description": "UUID of the User",
            "in": "path",
            "name": "userUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "User update object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Update user data",
        "tags": [
          "users"
        ]
      }
    },
    "/visits/{clientUUID}": {
      "get": {
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional flag to only return completed visits",
            "in": "query",
            "name": "isCompleted",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Optional filter on campaign uuid",
            "in": "query",
            "name": "campaignUUID",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional filter on user uuid",
            "in": "query",
            "name": "userUUID",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional visit schedule start date filter. If supplied, end date must also be supplied.",
            "format": "date-time",
            "in": "query",
            "name": "scheduleStartDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional visit schedule end date filter",
            "format": "date-time",
            "in": "query",
            "name": "scheduleEndDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional flag to request that the completed visit recorded latitude and longitude are returned",
            "in": "query",
            "name": "includeLatLng",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Optional flag to request that the completed visit survey responses are returned",
            "in": "query",
            "name": "includeSurveyResponses",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Optional flag to request that the completed visit location (site) updates are returned - ie status, comments, equipment updates, equipment orders",
            "in": "query",
            "name": "includeLocationStatuses",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Visit"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Invalid token"
          }
        },
        "summary": "Get all the visits for the client.",
        "tags": [
          "visits"
        ]
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Create one or more new visits for the client. A visit links a location (site) to a campaign and a user, together with the intended start and end times.<br/>To create multiple visits in a single request simply pass an array of visit objects in the body.",
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "Visit post object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VisitNew"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NewUUID"
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Create one or more new visits for the client",
        "tags": [
          "visits"
        ]
      }
    },
    "/visits/{clientUUID}/actions/all": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete all visits for this client.",
        "parameters": [
          {
            "description": "UUID of the Client",
            "in": "path",
            "name": "clientUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Delete all visits",
        "tags": [
          "visits"
        ]
      }
    },
    "/visits/{visitUUID}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete a visit.",
        "parameters": [
          {
            "description": "UUID of the Visit",
            "in": "path",
            "name": "visitUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Delete a visit",
        "tags": [
          "visits"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update some or all elements of one or more visits data.<br/>To update multiple visits in a single request simply pass an array of visit objects in the body.",
        "parameters": [
          {
            "description": "UUID of the Visit",
            "in": "path",
            "name": "visitUUID",
            "required": true,
            "type": "string"
          },
          {
            "description": "Visit update object",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VisitUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "422": {
            "description": "Bad body content (explanation in error message)"
          }
        },
        "summary": "Update one or more visits data",
        "tags": [
          "visits"
        ]
      }
    },
    "/visits/{visitUUID}/actions/reset": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This resets a completed visit. Actions: delete any photos, location statuses, survey responses and set the actualStartDate, actualEndDate and location data (lat, lng, accuracy) to null.",
        "parameters": [
          {
            "description": "UUID of the Visit",
            "in": "path",
            "name": "visitUUID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Reset a completed visit",
        "tags": [
          "visits"
        ]
      }
    }
  },
  "schemes": [
    "https"
  ],
  "swagger": "2.0"
}
