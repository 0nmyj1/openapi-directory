{
  "basePath": "/",
  "definitions": {
    "AuditData": {
      "description": "BigQuery request and response messages for audit log.",
      "properties": {
        "datasetInsertRequest": {
          "$ref": "#/definitions/DatasetInsertRequest",
          "description": "Dataset insert request."
        },
        "datasetInsertResponse": {
          "$ref": "#/definitions/DatasetInsertResponse",
          "description": "Dataset insert response."
        },
        "datasetListRequest": {
          "$ref": "#/definitions/DatasetListRequest",
          "description": "Dataset list request."
        },
        "datasetUpdateRequest": {
          "$ref": "#/definitions/DatasetUpdateRequest",
          "description": "Dataset update request."
        },
        "datasetUpdateResponse": {
          "$ref": "#/definitions/DatasetUpdateResponse",
          "description": "Dataset update response."
        },
        "jobGetQueryResultsRequest": {
          "$ref": "#/definitions/JobGetQueryResultsRequest",
          "description": "Job get query results request."
        },
        "jobGetQueryResultsResponse": {
          "$ref": "#/definitions/JobGetQueryResultsResponse",
          "description": "Job get query results response."
        },
        "jobInsertRequest": {
          "$ref": "#/definitions/JobInsertRequest",
          "description": "Job insert request."
        },
        "jobQueryDoneResponse": {
          "$ref": "#/definitions/JobQueryDoneResponse",
          "description": "Job query-done response. Use this information for usage analysis."
        },
        "jobQueryRequest": {
          "$ref": "#/definitions/JobQueryRequest",
          "description": "Job query request."
        },
        "jobQueryResponse": {
          "$ref": "#/definitions/JobQueryResponse",
          "description": "Job query response."
        },
        "tableDataListRequest": {
          "$ref": "#/definitions/TableDataListRequest",
          "description": "Table data-list request."
        },
        "tableInsertRequest": {
          "$ref": "#/definitions/TableInsertRequest",
          "description": "Table insert request."
        },
        "tableInsertResponse": {
          "$ref": "#/definitions/TableInsertResponse",
          "description": "Table insert response."
        },
        "tableUpdateRequest": {
          "$ref": "#/definitions/TableUpdateRequest",
          "description": "Table update request."
        },
        "tableUpdateResponse": {
          "$ref": "#/definitions/TableUpdateResponse",
          "description": "Table update response."
        }
      },
      "type": "object"
    },
    "AuditLog": {
      "description": "Common audit log format for Google Cloud Platform API calls.",
      "properties": {
        "authenticationInfo": {
          "$ref": "#/definitions/AuthenticationInfo",
          "description": "Authentication information about the call."
        },
        "authorizationInfo": {
          "description": "Authorization information about the call. If there are multiple resources or permissions involved in authorizing the request, there will be one AuthorizationInfo element for each {resource, permission} tuple.",
          "items": {
            "$ref": "#/definitions/AuthorizationInfo"
          },
          "type": "array"
        },
        "bigqueryData": {
          "$ref": "#/definitions/AuditData",
          "description": "Service-specific data for BigQuery."
        },
        "methodName": {
          "description": "Name of the service method or operation. Defined by the service. For API call events, should match the name of the API method. For example, `google.datastore.v1.Datastore.RunQuery` `google.logging.v1.LoggingService.DeleteLog`",
          "type": "string"
        },
        "numResponseItems": {
          "description": "If applicable, the number of items returned from a List or Query API method.",
          "format": "int64",
          "type": "string"
        },
        "requestMetadata": {
          "$ref": "#/definitions/RequestMetadata",
          "description": "Metadata about the request."
        },
        "resourceName": {
          "description": "Resource name of the resource or collection that is the target of this request, as a scheme-less URI, not including the API service name. For example: shelves/shelf_id/books shelves/shelf_id/books/book_id",
          "type": "string"
        },
        "serviceData": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @ype with type URL."
          },
          "description": "Service specific data about the request, response, and other event data. This should include all request parameters or response elements, except for parameters that are large or privacy-sensitive. It should never contain user-generated data (such as file contents).",
          "type": "object"
        },
        "serviceName": {
          "description": "Name of the API service for the request. e.g., datastore.googleapis.com",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Status",
          "description": "The status of the overall API call."
        }
      },
      "type": "object"
    },
    "AuthenticationInfo": {
      "description": "Authentication information for the call.",
      "properties": {
        "principalEmail": {
          "description": "Email address of the authenticated user making the request",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuthorizationInfo": {
      "description": "Authorization information for the call.",
      "properties": {
        "granted": {
          "description": "Whether or not authorization for this resource and permission was granted.",
          "type": "boolean"
        },
        "permission": {
          "description": "The required IAM permission.",
          "type": "string"
        },
        "resource": {
          "description": "The resource being accessed, as a REST-style string. For example: `bigquery.googlapis.com/projects/PROJECTID/datasets/DATASETID`",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BigQueryAcl": {
      "description": "Access control list.",
      "properties": {
        "entries": {
          "description": "Access control entry list.",
          "items": {
            "$ref": "#/definitions/Entry"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Dataset": {
      "description": "BigQuery dataset information.",
      "properties": {
        "acl": {
          "$ref": "#/definitions/BigQueryAcl",
          "description": "Access contol list for this dataset."
        },
        "createTime": {
          "description": "The creation time for this dataset.",
          "type": "string"
        },
        "datasetName": {
          "$ref": "#/definitions/DatasetName",
          "description": "The name of this dataset."
        },
        "defaultTableExpireDuration": {
          "description": "The number of milliseconds which should be added to the creation time to determine the expiration time for newly created tables. If this value is null then no expiration time will be set for new tables.",
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/DatasetInfo",
          "description": "User-modifiable metadata for this dataset."
        },
        "updateTime": {
          "description": "The last modified time for this dataset.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DatasetInfo": {
      "description": "User-provided metadata for a dataset, primarily for display in the UI.",
      "properties": {
        "description": {
          "description": "The description of a dataset. This can be several sentences or paragraphs describing the dataset contents in detail.",
          "type": "string"
        },
        "friendlyName": {
          "description": "The human-readable name of a dataset. This should be a short phrase identifying the dataset (e.g., \"Analytics Data 2011\").",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DatasetInsertRequest": {
      "description": "Dataset insert request.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/Dataset",
          "description": "Dataset insert payload."
        }
      },
      "type": "object"
    },
    "DatasetInsertResponse": {
      "description": "Dataset insert response.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/Dataset",
          "description": "Final state of inserted dataset."
        }
      },
      "type": "object"
    },
    "DatasetListRequest": {
      "description": "Dataset list request.",
      "properties": {
        "listAll": {
          "description": "Whether to list all datasets, including hidden ones.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DatasetName": {
      "description": "Fully qualified name for a dataset.",
      "properties": {
        "datasetId": {
          "description": "The ID of the dataset (scoped to the project above).",
          "type": "string"
        },
        "projectId": {
          "description": "A string containing the id of this project. The id may be the alphanumeric project ID, or the project number.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DatasetUpdateRequest": {
      "description": "Dataset update request.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/Dataset",
          "description": "Dataset update payload."
        }
      },
      "type": "object"
    },
    "DatasetUpdateResponse": {
      "description": "Dataset update response.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/Dataset",
          "description": "Final state of updated dataset."
        }
      },
      "type": "object"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object"
    },
    "Entry": {
      "description": "Access control entry.",
      "properties": {
        "domain": {
          "description": "Grants access to all members of a domain.",
          "type": "string"
        },
        "groupEmail": {
          "description": "Grants access to a group, by e-mail.",
          "type": "string"
        },
        "role": {
          "description": "Granted role. Valid roles are READER, WRITER, OWNER.",
          "type": "string"
        },
        "specialGroup": {
          "description": "Grants access to special groups. Valid groups are PROJECT_OWNERS, PROJECT_READERS, PROJECT_WRITERS and ALL_AUTHENTICATED_USERS.",
          "type": "string"
        },
        "userEmail": {
          "description": "Grants access to a user, by e-mail.",
          "type": "string"
        },
        "viewName": {
          "$ref": "#/definitions/TableName",
          "description": "Grants access to a BigQuery View."
        }
      },
      "type": "object"
    },
    "Extract": {
      "description": "Describes an extract job, which exports data to an external source via the export pipeline.",
      "properties": {
        "destinationUris": {
          "description": "URI or URIs where extracted data should be written. Currently, only Bigstore URIs are supported (e.g., \"gs://bucket/object\"). If more than one URI given, output will be divided into 'partitions' of data, with each partition containing one or more files. If more than one URI is given, each URI must contain exactly one '*' which will be replaced with the file number (within the partition) padded out to 9 digits.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sourceTable": {
          "$ref": "#/definitions/TableName",
          "description": "Source table."
        }
      },
      "type": "object"
    },
    "FieldSchema": {
      "description": "BigQuery field schema.",
      "properties": {
        "mode": {
          "description": "Column mode",
          "type": "string"
        },
        "name": {
          "description": "Column name Matches: [A-Za-z_][A-Za-z_0-9]{0,127}",
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/TableSchema",
          "description": "Present iff type == RECORD."
        },
        "type": {
          "description": "Column type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "HttpRequest": {
      "description": "A common proto for logging HTTP requests.",
      "properties": {
        "referer": {
          "description": "Referer (a.k.a. referrer) URL of request, as defined in http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html.",
          "type": "string"
        },
        "remoteIp": {
          "description": "IP address of the client who issues the HTTP request. Could be either IPv4 or IPv6.",
          "type": "string"
        },
        "requestMethod": {
          "description": "Request method, such as `GET`, `HEAD`, `PUT` or `POST`.",
          "type": "string"
        },
        "requestSize": {
          "description": "Size of the HTTP request message in bytes, including request headers and the request body.",
          "format": "int64",
          "type": "string"
        },
        "requestUrl": {
          "description": "Contains the scheme (http|https), the host name, the path and the query portion of the URL that was requested.",
          "type": "string"
        },
        "responseSize": {
          "description": "Size of the HTTP response message in bytes sent back to the client, including response headers and response body.",
          "format": "int64",
          "type": "string"
        },
        "status": {
          "description": "A response code indicates the status of response, e.g., 200.",
          "format": "int32",
          "type": "integer"
        },
        "userAgent": {
          "description": "User agent sent by the client, e.g., \"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Job": {
      "description": "Combines all of the information about a job.",
      "properties": {
        "jobConfiguration": {
          "$ref": "#/definitions/JobConfiguration",
          "description": "Job configuration."
        },
        "jobName": {
          "$ref": "#/definitions/JobName",
          "description": "Job name."
        },
        "jobStatistics": {
          "$ref": "#/definitions/JobStatistics",
          "description": "Job statistics."
        },
        "jobStatus": {
          "$ref": "#/definitions/JobStatus",
          "description": "Job status."
        }
      },
      "type": "object"
    },
    "JobConfiguration": {
      "description": "Job configuration information.",
      "properties": {
        "dryRun": {
          "description": "If set, don't actually run the job. Just check that it would run.",
          "type": "boolean"
        },
        "extract": {
          "$ref": "#/definitions/Extract",
          "description": "Extract job information."
        },
        "load": {
          "$ref": "#/definitions/Load",
          "description": "Load job information."
        },
        "query": {
          "$ref": "#/definitions/Query",
          "description": "Query job information."
        },
        "tableCopy": {
          "$ref": "#/definitions/TableCopy",
          "description": "TableCopy job information."
        }
      },
      "type": "object"
    },
    "JobGetQueryResultsRequest": {
      "description": "Job get-query-results request.",
      "properties": {
        "maxResults": {
          "description": "Maximum number of results to return.",
          "format": "uint32",
          "type": "integer"
        },
        "startRow": {
          "description": "Row number to start returning results from.",
          "format": "uint64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "JobGetQueryResultsResponse": {
      "description": "Job get-query-results response.",
      "properties": {
        "job": {
          "$ref": "#/definitions/Job",
          "description": "Job that was created to run the query. Includes job state, job statistics, and job errors (if any). To determine whether the job has completed, check that job.status.state == DONE. If job.status.error_result is set, then the job failed. If the job has not yet completed, call GetQueryResults again."
        },
        "totalResults": {
          "description": "Total number of results in query results.",
          "format": "uint64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "JobInsertRequest": {
      "description": "Job insert request.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/Job",
          "description": "Job insert payload."
        }
      },
      "type": "object"
    },
    "JobName": {
      "description": "Fully-qualified name for a job.",
      "properties": {
        "jobId": {
          "description": "The ID of the job (scoped to the project above).",
          "type": "string"
        },
        "projectId": {
          "description": "A string containing the id of this project.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "JobQueryDoneResponse": {
      "description": "Job get query-done response.",
      "properties": {
        "job": {
          "$ref": "#/definitions/Job",
          "description": "Usage information about completed job."
        }
      },
      "type": "object"
    },
    "JobQueryRequest": {
      "description": "Job query request.",
      "properties": {
        "defaultDataset": {
          "$ref": "#/definitions/DatasetName",
          "description": "Default dataset to use when tables in a query do not have a dataset specified."
        },
        "dryRun": {
          "description": "If set, don't actually run the query.",
          "type": "boolean"
        },
        "maxResults": {
          "description": "Maximum number of results to return.",
          "format": "uint32",
          "type": "integer"
        },
        "projectId": {
          "description": "Project that the query should be charged to.",
          "type": "string"
        },
        "query": {
          "description": "The query to execute.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "JobQueryResponse": {
      "description": "Job query response.",
      "properties": {
        "job": {
          "$ref": "#/definitions/Job",
          "description": "Information about queried job."
        },
        "totalResults": {
          "description": "The total number of rows in the complete query result set.",
          "format": "uint64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "JobStatistics": {
      "description": "Job statistics that may change after a job starts.",
      "properties": {
        "createTime": {
          "description": "Time when the job was created (in milliseconds since the POSIX epoch).",
          "type": "string"
        },
        "endTime": {
          "description": "Time when the job ended.",
          "type": "string"
        },
        "startTime": {
          "description": "Time when the job started.",
          "type": "string"
        },
        "totalProcessedBytes": {
          "description": "Total bytes processed for a job.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "JobStatus": {
      "description": "Running state of a job (whether it is running, failed, etc).",
      "properties": {
        "error": {
          "$ref": "#/definitions/Status",
          "description": "If the job did not complete successfully, this will contain an error."
        },
        "state": {
          "description": "State of a job: PENDING, RUNNING, DONE. Includes no information about whether the job was successful or not.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListLogServiceIndexesResponse": {
      "description": "Result returned from ListLogServiceIndexesRequest.",
      "properties": {
        "nextPageToken": {
          "description": "If there are more results, then `nextPageToken` is returned in the response. To get the next batch of indexes, use the value of `nextPageToken` as `pageToken` in the next call of `ListLogServiceIndexes`. If `nextPageToken` is empty, then there are no more results.",
          "type": "string"
        },
        "serviceIndexPrefixes": {
          "description": "A list of log service index prefixes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ListLogServiceSinksResponse": {
      "description": "Result returned from `ListLogServiceSinks`.",
      "properties": {
        "sinks": {
          "description": "The requested log service sinks. If any of the returned `LogSink` objects have an empty `destination` field, then call `logServices.sinks.get` to retrieve the complete `LogSink` object.",
          "items": {
            "$ref": "#/definitions/LogSink"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ListLogServicesResponse": {
      "description": "Result returned from `ListLogServicesRequest`.",
      "properties": {
        "logServices": {
          "description": "A list of log services.",
          "items": {
            "$ref": "#/definitions/LogService"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "If there are more results, then `nextPageToken` is returned in the response. To get the next batch of services, use the value of `nextPageToken` as `pageToken` in the next call of `ListLogServices`. If `nextPageToken` is empty, then there are no more results.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListLogSinksResponse": {
      "description": "Result returned from `ListLogSinks`.",
      "properties": {
        "sinks": {
          "description": "The requested log sinks. If any of the returned `LogSink` objects have an empty `destination` field, then call `logServices.sinks.get` to retrieve the complete `LogSink` object.",
          "items": {
            "$ref": "#/definitions/LogSink"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ListLogsResponse": {
      "description": "Result returned from ListLogs.",
      "properties": {
        "logs": {
          "description": "A list of log resources.",
          "items": {
            "$ref": "#/definitions/Log"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "If there are more results, then `nextPageToken` is returned in the response. To get the next batch of logs, use the value of `nextPageToken` as `pageToken` in the next call of `ListLogs`. If `nextPageToken` is empty, then there are no more results.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListSinksResponse": {
      "description": "Result returned from `ListSinks`.",
      "properties": {
        "sinks": {
          "description": "The requested sinks.",
          "items": {
            "$ref": "#/definitions/LogSink"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Load": {
      "description": "Describes a load job, which loads data from an external source via the import pipeline.",
      "properties": {
        "createDisposition": {
          "description": "Describes when a job should create a table.",
          "type": "string"
        },
        "destinationTable": {
          "$ref": "#/definitions/TableName",
          "description": "table where the imported data should be written."
        },
        "schema": {
          "$ref": "#/definitions/TableSchema",
          "description": "Schema for the data to be imported."
        },
        "sourceUris": {
          "description": "URIs for the data to be imported. Only Bigstore URIs are supported (e.g., \"gs://bucket/object\").",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "writeDisposition": {
          "description": "Describes how writes should affect the table associated with the job.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Log": {
      "description": "A log object.",
      "properties": {
        "displayName": {
          "description": "Name used when displaying the log to the user (for example, in a UI). Example: `\"activity_log\"`",
          "type": "string"
        },
        "name": {
          "description": "REQUIRED: The log's name. Example: `\"compute.googleapis.com/activity_log\"`.",
          "type": "string"
        },
        "payloadType": {
          "description": "Type URL describing the expected payload type for the log.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LogEntry": {
      "description": "An individual entry in a log.",
      "properties": {
        "httpRequest": {
          "$ref": "#/definitions/HttpRequest",
          "description": "Information about the HTTP request associated with this log entry, if applicable."
        },
        "insertId": {
          "description": "A unique ID for the log entry. If you provide this field, the logging service considers other log entries in the same log with the same ID as duplicates which can be removed.",
          "type": "string"
        },
        "log": {
          "description": "The log to which this entry belongs. When a log entry is ingested, the value of this field is set by the logging system.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/LogEntryMetadata",
          "description": "Information about the log entry."
        },
        "protoPayload": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @ype with type URL."
          },
          "description": "The log entry payload, represented as a protocol buffer that is expressed as a JSON object. You can only pass `protoPayload` values that belong to a set of approved types.",
          "type": "object"
        },
        "structPayload": {
          "additionalProperties": {
            "description": "Properties of the object."
          },
          "description": "The log entry payload, represented as a structure that is expressed as a JSON object.",
          "type": "object"
        },
        "textPayload": {
          "description": "The log entry payload, represented as a text string.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LogEntryMetadata": {
      "description": "Additional data that is associated with a log entry, set by the service creating the log entry.",
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A set of (key, value) data that provides additional information about the log entry. If the log entry is from one of the Google Cloud Platform sources listed below, the indicated (key, value) information must be provided: Google App Engine, service_name `appengine.googleapis.com`: \"appengine.googleapis.com/module_id\",  \"appengine.googleapis.com/version_id\",  and one of: \"appengine.googleapis.com/replica_index\",  \"appengine.googleapis.com/clone_id\",  or else provide the following Compute Engine labels: Google Compute Engine, service_name `compute.googleapis.com`: \"compute.googleapis.com/resource_type\", \"instance\" \"compute.googleapis.com/resource_id\",",
          "type": "object"
        },
        "projectId": {
          "description": "The project ID of the Google Cloud Platform service that created the log entry.",
          "type": "string"
        },
        "region": {
          "description": "The region name of the Google Cloud Platform service that created the log entry. For example, `\"us-central1\"`.",
          "type": "string"
        },
        "serviceName": {
          "description": "The API name of the Google Cloud Platform service that created the log entry. For example, `\"compute.googleapis.com\"`.",
          "type": "string"
        },
        "severity": {
          "description": "The severity of the log entry.",
          "enum": [
            "DEFAULT",
            "DEBUG",
            "INFO",
            "NOTICE",
            "WARNING",
            "ERROR",
            "CRITICAL",
            "ALERT",
            "EMERGENCY"
          ],
          "type": "string"
        },
        "timestamp": {
          "description": "The time the event described by the log entry occurred. Timestamps must be later than January 1, 1970.",
          "type": "string"
        },
        "userId": {
          "description": "The fully-qualified email address of the authenticated user that performed or requested the action represented by the log entry. If the log entry does not apply to an action taken by an authenticated user, then the field should be empty.",
          "type": "string"
        },
        "zone": {
          "description": "The zone of the Google Cloud Platform service that created the log entry. For example, `\"us-central1-a\"`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LogError": {
      "description": "A problem in a sink or the sink's configuration.",
      "properties": {
        "resource": {
          "description": "The resource associated with the error. It may be different from the sink destination. For example, the sink may point to a BigQuery dataset, but the error may refer to a table resource inside the dataset.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Status",
          "description": "The description of the last error observed."
        },
        "timeNanos": {
          "description": "The last time the error was observed, in nanoseconds since the Unix epoch.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LogLine": {
      "description": "Application log line emitted while processing a request.",
      "properties": {
        "logMessage": {
          "description": "App provided log message.",
          "type": "string"
        },
        "severity": {
          "description": "Severity of log.",
          "enum": [
            "DEFAULT",
            "DEBUG",
            "INFO",
            "NOTICE",
            "WARNING",
            "ERROR",
            "CRITICAL",
            "ALERT",
            "EMERGENCY"
          ],
          "type": "string"
        },
        "sourceLocation": {
          "$ref": "#/definitions/SourceLocation",
          "description": "Line of code that generated this log message."
        },
        "time": {
          "description": "Time when log entry was made. May be inaccurate.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LogService": {
      "description": "A log service object.",
      "properties": {
        "indexKeys": {
          "description": "Label keys used when labeling log entries for this service. The order of the keys is significant, with higher priority keys coming earlier in the list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "The service's name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LogSink": {
      "description": "An object that describes where a log may be written.",
      "properties": {
        "destination": {
          "description": "The resource to send log entries to. The supported sink resource types are: + Google Cloud Storage: `storage.googleapis.com/BUCKET` or `BUCKET.storage.googleapis.com/` + Google BigQuery: `bigquery.googleapis.com/projects/PROJECT/datasets/DATASET` Currently the Cloud Logging API supports at most one sink for each resource type per log or log service resource.",
          "type": "string"
        },
        "errors": {
          "description": "_Output only._ All active errors found for this sink.",
          "items": {
            "$ref": "#/definitions/LogError"
          },
          "type": "array"
        },
        "filter": {
          "description": "One Platform filter expression. If provided, only the messages matching the filter will be published.",
          "type": "string"
        },
        "name": {
          "description": "The name of this sink. This is a client-assigned identifier for the resource. This is ignored by UpdateLogSink and UpdateLogServicesSink.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Money": {
      "description": "Represents an amount of money with its currency type.",
      "properties": {
        "currencyCode": {
          "description": "The 3-letter currency code defined in ISO 4217.",
          "type": "string"
        },
        "nanos": {
          "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
          "format": "int32",
          "type": "integer"
        },
        "units": {
          "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Query": {
      "description": "Describes a query job, which executes a SQL-like query.",
      "properties": {
        "createDisposition": {
          "description": "Describe when a job should create a table.",
          "type": "string"
        },
        "defaultDataset": {
          "$ref": "#/definitions/DatasetName",
          "description": "If a table name is specified without a dataset in a query, this dataset will be added to table name."
        },
        "destinationTable": {
          "$ref": "#/definitions/TableName",
          "description": "table where results should be written."
        },
        "query": {
          "description": "SQL query to run.",
          "type": "string"
        },
        "tableDefinitions": {
          "description": "Additional tables that this query might reference beyond the tables already defined in BigQuery. This is typically used to provide external data references for this query.",
          "items": {
            "$ref": "#/definitions/TableDefinition"
          },
          "type": "array"
        },
        "writeDisposition": {
          "description": "Describes how writes should affect the table associated with the job.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RequestLog": {
      "description": "Complete log information about a single request to an application.",
      "properties": {
        "appEngineRelease": {
          "description": "App Engine release version string.",
          "type": "string"
        },
        "appId": {
          "description": "Identifies the application that handled this request.",
          "type": "string"
        },
        "cost": {
          "description": "An indication of the relative cost of serving this request.",
          "format": "double",
          "type": "number"
        },
        "endTime": {
          "description": "Time at which request was known to end processing.",
          "type": "string"
        },
        "finished": {
          "description": "If true, represents a finished request. Otherwise, the request is active.",
          "type": "boolean"
        },
        "host": {
          "description": "The Internet host and port number of the resource being requested.",
          "type": "string"
        },
        "httpVersion": {
          "description": "HTTP version of request.",
          "type": "string"
        },
        "instanceId": {
          "description": "An opaque identifier for the instance that handled the request.",
          "format": "byte",
          "type": "string"
        },
        "instanceIndex": {
          "description": "If the instance that processed this request was individually addressable (i.e. belongs to a manually scaled module), this is the index of the instance.",
          "format": "int32",
          "type": "integer"
        },
        "ip": {
          "description": "Origin IP address.",
          "type": "string"
        },
        "latency": {
          "description": "Latency of the request.",
          "type": "string"
        },
        "line": {
          "description": "List of log lines emitted by the application while serving this request, if requested.",
          "items": {
            "$ref": "#/definitions/LogLine"
          },
          "type": "array"
        },
        "megaCycles": {
          "description": "Number of CPU megacycles used to process request.",
          "format": "int64",
          "type": "string"
        },
        "method": {
          "description": "Request method, such as `GET`, `HEAD`, `PUT`, `POST`, or `DELETE`.",
          "type": "string"
        },
        "moduleId": {
          "description": "Identifies the module of the application that handled this request.",
          "type": "string"
        },
        "nickname": {
          "description": "A string that identifies a logged-in user who made this request, or empty if the user is not logged in. Most likely, this is the part of the user's email before the '@' sign. The field value is the same for different requests from the same user, but different users may have a similar name. This information is also available to the application via Users API. This field will be populated starting with App Engine 1.9.21.",
          "type": "string"
        },
        "pendingTime": {
          "description": "Time this request spent in the pending request queue, if it was pending at all.",
          "type": "string"
        },
        "referrer": {
          "description": "Referrer URL of request.",
          "type": "string"
        },
        "requestId": {
          "description": "Globally unique identifier for a request, based on request start time. Request IDs for requests which started later will compare greater as binary strings than those for requests which started earlier.",
          "format": "byte",
          "type": "string"
        },
        "resource": {
          "description": "Contains the path and query portion of the URL that was requested. For example, if the URL was \"http://example.com/app?name=val\", the resource would be \"/app?name=val\". Any trailing fragment (separated by a '#' character) will not be included.",
          "type": "string"
        },
        "responseSize": {
          "description": "Size in bytes sent back to client by request.",
          "format": "int64",
          "type": "string"
        },
        "sourceReference": {
          "description": "Source code for the application that handled this request. There can be more than one source reference per deployed application if source code is distributed among multiple repositories.",
          "items": {
            "$ref": "#/definitions/SourceReference"
          },
          "type": "array"
        },
        "startTime": {
          "description": "Time at which request was known to have begun processing.",
          "type": "string"
        },
        "status": {
          "description": "Response status of request.",
          "format": "int32",
          "type": "integer"
        },
        "taskName": {
          "description": "Task name of the request (for an offline request).",
          "type": "string"
        },
        "taskQueueName": {
          "description": "Queue name of the request (for an offline request).",
          "type": "string"
        },
        "traceId": {
          "description": "Cloud Trace identifier of the trace for this request.",
          "type": "string"
        },
        "urlMapEntry": {
          "description": "File or class within URL mapping used for request. Useful for tracking down the source code which was responsible for managing request. Especially for multiply mapped handlers.",
          "type": "string"
        },
        "userAgent": {
          "description": "User agent used for making request.",
          "type": "string"
        },
        "versionId": {
          "description": "Version of the application that handled this request.",
          "type": "string"
        },
        "wasLoadingRequest": {
          "description": "Was this request a loading request for this instance?",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RequestMetadata": {
      "description": "Metadata about the request.",
      "properties": {
        "callerIp": {
          "description": "IP address of the caller",
          "type": "string"
        },
        "callerSuppliedUserAgent": {
          "description": "User-Agent of the caller. This is not authenticated, so a malicious caller could provide a misleading value. For example: `google-api-python-client/1.4.0` The request was made by the Google API client for Python. `Cloud SDK Command Line Tool apitools-client/1.0 gcloud/0.9.62` The request was made by the Google Cloud SDK CLI (gcloud). `AppEngine-Google; (+http://code.google.com/appengine; appid: s~my-project` The request was made from the `my-project` App Engine app.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SourceLocation": {
      "description": "Specifies a location in a source file.",
      "properties": {
        "file": {
          "description": "Source file name. May or may not be a fully qualified name, depending on the runtime environment.",
          "type": "string"
        },
        "functionName": {
          "description": "Human-readable name of the function or method being invoked, with optional context such as the class or package name, for use in contexts such as the logs viewer where file:line number is less meaningful. This may vary by language, for example: in Java: qual.if.ied.Class.method in Go: dir/package.func in Python: function ...",
          "type": "string"
        },
        "line": {
          "description": "Line within the source file.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SourceReference": {
      "description": "A reference to a particular snapshot of the source tree used to build and deploy an application.",
      "properties": {
        "repository": {
          "description": "Optional. A URI string identifying the repository. Example: \"https://github.com/GoogleCloudPlatform/kubernetes.git\"",
          "type": "string"
        },
        "revisionId": {
          "description": "The canonical (and persistent) identifier of the deployed revision. Example (git): \"0035781c50ec7aa23385dc841529ce8a4b70db1b\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). The error model is designed to be: - Simple to use and understand for most users - Flexible enough to meet unexpected needs # Overview The `Status` message contains three pieces of data: error code, error message, and error details. The error code should be an enum value of [google.rpc.Code][], but it may accept additional error codes if needed. The error message should be a developer-facing English message that helps developers *understand* and *resolve* the error. If a localized user-facing error message is needed, put the localized message in the error details or localize it in the client. The optional error details may contain arbitrary information about the error. There is a predefined set of error detail types in the package `google.rpc` which can be used for common error conditions. # Language mapping The `Status` message is the logical representation of the error model, but it is not necessarily the actual wire format. When the `Status` message is exposed in different client libraries and different wire protocols, it can be mapped differently. For example, it will likely be mapped to some exceptions in Java, but more likely mapped to some error codes in C. # Other uses The error model and the `Status` message can be used in a variety of environments, either with or without APIs, to provide a consistent developer experience across different environments. Example uses of this error model include: - Partial errors. If a service needs to return partial errors to the client, it may embed the `Status` in the normal response to indicate the partial errors. - Workflow errors. A typical workflow has multiple steps. Each step may have a `Status` message for error reporting purpose. - Batch operations. If a client uses batch request and batch response, the `Status` message should be used directly inside batch response, one for each error sub-response. - Asynchronous operations. If an API call embeds asynchronous operation results in its response, the status of those operations should be represented directly using the `Status` message. - Logging. If some API errors are stored in logs, the message `Status` could be used directly after any stripping needed for security/privacy reasons.",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of [google.rpc.Code][].",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "description": "A list of messages that carry the error details. There will be a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @ype with type URL."
            },
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Table": {
      "description": "Message containing BigQuery table information.",
      "properties": {
        "createTime": {
          "description": "The creation time for this table.",
          "type": "string"
        },
        "expireTime": {
          "description": "The expiration date for this table. After this time, the table will not be externally visible and all storage associated with the table may be garbage collected. If this field is not present, the HelixDataset.default_table_expiration_ms value will be used to calculate the expiration time. Otherwise, the table will live until explicitly deleted.",
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/TableInfo",
          "description": "User-modifiable metadata for this table."
        },
        "schema": {
          "$ref": "#/definitions/TableSchema",
          "description": "The table schema."
        },
        "tableName": {
          "$ref": "#/definitions/TableName",
          "description": "The table and dataset IDs uniquely describing this table."
        },
        "truncateTime": {
          "description": "The last truncation time for this table. This will only be updated when operation specified with WRITE_TRUNCATE.",
          "type": "string"
        },
        "view": {
          "$ref": "#/definitions/TableViewDefinition",
          "description": "The table provides a Database View behavior and functionality based on a query."
        }
      },
      "type": "object"
    },
    "TableCopy": {
      "description": "Describes a copy job, which copies an existing table to another table.",
      "properties": {
        "createDisposition": {
          "description": "Describe when a job should create a table.",
          "type": "string"
        },
        "destinationTable": {
          "$ref": "#/definitions/TableName",
          "description": "Destination table."
        },
        "sourceTables": {
          "description": "Source tables.",
          "items": {
            "$ref": "#/definitions/TableName"
          },
          "type": "array"
        },
        "writeDisposition": {
          "description": "Describe whether the copy operation should append or not.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TableDataListRequest": {
      "description": "Table data-list request.",
      "properties": {
        "maxResults": {
          "description": "Maximum number of results to return.",
          "format": "uint32",
          "type": "integer"
        },
        "startRow": {
          "description": "Starting row offset.",
          "format": "uint64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TableDefinition": {
      "description": "Per Query external tables. These tables can be referenced with 'name' in the query and can be read just like any other table.",
      "properties": {
        "name": {
          "description": "Name of the table. This will be used to reference this table in the query.",
          "type": "string"
        },
        "sourceUris": {
          "description": "URIs for the data to be imported.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TableInfo": {
      "description": "User-provided metadata for a table, primarily for display in the UI.",
      "properties": {
        "description": {
          "description": "The description of a table. This can be several sentences or paragraphs describing the table contents in detail.",
          "type": "string"
        },
        "friendlyName": {
          "description": "The human-readable name of a table. This should be a short phrase identifying the table (e.g., \"Analytics Data - Jan 2011\").",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TableInsertRequest": {
      "description": "==== Table =======// Table insert request.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/Table",
          "description": "Table insert payload."
        }
      },
      "type": "object"
    },
    "TableInsertResponse": {
      "description": "Table insert response.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/Table",
          "description": "Final state of inserted table."
        }
      },
      "type": "object"
    },
    "TableName": {
      "description": "Fully-qualified name for a table -- referenced through a dataset.",
      "properties": {
        "datasetId": {
          "description": "The ID of the dataset (scoped to the project above).",
          "type": "string"
        },
        "projectId": {
          "description": "A string containing the id of this project. The id be the alphanumeric project ID, or the project number.",
          "type": "string"
        },
        "tableId": {
          "description": "The ID of the table (scoped to the dataset above).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TableSchema": {
      "description": "BigQuery table schema.",
      "properties": {
        "fields": {
          "description": "One field per column in the table",
          "items": {
            "$ref": "#/definitions/FieldSchema"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TableUpdateRequest": {
      "description": "Table update request.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/Table",
          "description": "Table update payload."
        }
      },
      "type": "object"
    },
    "TableUpdateResponse": {
      "description": "Table update response.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/Table",
          "description": "Final state of updated table."
        }
      },
      "type": "object"
    },
    "TableViewDefinition": {
      "description": "Metadata for a table to become like a Database View based on a SQL-like query.",
      "properties": {
        "query": {
          "description": "Sql query to run.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WriteLogEntriesRequest": {
      "description": "The parameters to WriteLogEntries.",
      "properties": {
        "commonLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata labels that apply to all log entries in this request, so that you don't have to repeat them in each log entry's `metadata.labels` field. If any of the log entries contains a (key, value) with the same key that is in `commonLabels`, then the entry's (key, value) overrides the one in `commonLabels`.",
          "type": "object"
        },
        "entries": {
          "description": "Log entries to insert.",
          "items": {
            "$ref": "#/definitions/LogEntry"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "WriteLogEntriesResponse": {
      "description": "Result returned from WriteLogEntries. empty",
      "type": "object"
    }
  },
  "externalDocs": {
    "url": "https://cloud.google.com/logging/docs/"
  },
  "host": "logging.googleapis.com",
  "info": {
    "contact": {
      "name": "Google",
      "url": "https://google.com"
    },
    "description": "Google Cloud Logging API lets you create logs, ingest log entries, and manage log sinks.",
    "title": "Google Cloud Logging API",
    "version": "v1beta3",
    "x-logo": "https://www.google.com/images/srpr/logo11w.png",
    "x-origin": {
      "format": "google",
      "url": "https://www.googleapis.com/discovery/v1/apis/logging/v1beta3/rest",
      "version": "v1"
    },
    "x-providerName": "googleapis.com",
    "x-serviceName": "logging"
  },
  "parameters": {
    "$.xgafv": {
      "description": "V1 error format.",
      "in": "query",
      "name": "$.xgafv",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "in": "query",
      "name": "access_token",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "description": "Data format for response.",
      "in": "query",
      "name": "alt",
      "type": "string"
    },
    "bearer_token": {
      "description": "OAuth bearer token.",
      "in": "query",
      "name": "bearer_token",
      "type": "string"
    },
    "callback": {
      "description": "JSONP",
      "in": "query",
      "name": "callback",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "in": "query",
      "name": "fields",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "in": "query",
      "name": "key",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "in": "query",
      "name": "oauth_token",
      "type": "string"
    },
    "pp": {
      "default": true,
      "description": "Pretty-print response.",
      "in": "query",
      "name": "pp",
      "type": "boolean"
    },
    "prettyPrint": {
      "default": true,
      "description": "Returns response with indentations and line breaks.",
      "in": "query",
      "name": "prettyPrint",
      "type": "boolean"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "in": "query",
      "name": "quotaUser",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "in": "query",
      "name": "uploadType",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "in": "query",
      "name": "upload_protocol",
      "type": "string"
    }
  },
  "paths": {
    "/v1beta3/projects/{projectsId}/logServices": {
      "get": {
        "description": "Lists log services associated with log entries ingested for a project.",
        "operationId": "logging.projects.logServices.list",
        "parameters": [
          {
            "description": "Part of `projectName`. The project resource whose services are to be listed.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the log resource whose services are to be listed. log for which to list services. When empty, all services are listed.",
            "in": "query",
            "name": "log",
            "type": "string"
          },
          {
            "description": "The maximum number of `LogService` objects to return in one operation.",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "An opaque token, returned as `nextPageToken` by a prior `ListLogServices` operation. If `pageToken` is supplied, then the other fields of this request are ignored, and instead the previous `ListLogServices` operation is continued.",
            "in": "query",
            "name": "pageToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ListLogServicesResponse"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin",
              "https://www.googleapis.com/auth/logging.read"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ]
    },
    "/v1beta3/projects/{projectsId}/logServices/{logServicesId}/indexes": {
      "get": {
        "description": "Lists log service indexes associated with a log service.",
        "operationId": "logging.projects.logServices.indexes.list",
        "parameters": [
          {
            "description": "Part of `serviceName`. A log service resource of the form `/projects/*/logServices/*`. The service indexes of the log service are returned. Example: `\"/projects/myProj/logServices/appengine.googleapis.com\"`.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `serviceName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "logServicesId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Restricts the indexes returned to be those with a specified prefix. The prefix has the form `\"/label_value/label_value/...\"`, in order corresponding to the [`LogService indexKeys`][google.logging.v1.LogService.index_keys]. Non-empty prefixes must begin with `/` . Example prefixes: + `\"/myModule/\"` retrieves App Engine versions associated with `myModule`. The trailing slash terminates the value. + `\"/myModule\"` retrieves App Engine modules with names beginning with `myModule`. + `\"\"` retrieves all indexes.",
            "in": "query",
            "name": "indexPrefix",
            "type": "string"
          },
          {
            "description": "A limit to the number of levels of the index hierarchy that are expanded. If `depth` is 0, it defaults to the level specified by the prefix field (the number of slash separators). The default empty prefix implies a `depth` of 1. It is an error for `depth` to be any non-zero value less than the number of components in `indexPrefix`.",
            "in": "query",
            "name": "depth",
            "type": "integer"
          },
          {
            "description": "A log resource like `/projects/project_id/logs/log_name`, identifying the log for which to list service indexes.",
            "in": "query",
            "name": "log",
            "type": "string"
          },
          {
            "description": "The maximum number of log service index resources to return in one operation.",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "An opaque token, returned as `nextPageToken` by a prior `ListLogServiceIndexes` operation. If `pageToken` is supplied, then the other fields of this request are ignored, and instead the previous `ListLogServiceIndexes` operation is continued.",
            "in": "query",
            "name": "pageToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ListLogServiceIndexesResponse"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin",
              "https://www.googleapis.com/auth/logging.read"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ]
    },
    "/v1beta3/projects/{projectsId}/logServices/{logServicesId}/sinks": {
      "get": {
        "description": "Lists log service sinks associated with the specified service.",
        "operationId": "logging.projects.logServices.sinks.list",
        "parameters": [
          {
            "description": "Part of `serviceName`. The name of the service for which to list sinks.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `serviceName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "logServicesId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ListLogServiceSinksResponse"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin",
              "https://www.googleapis.com/auth/logging.read"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "post": {
        "description": "Creates the specified log service sink resource.",
        "operationId": "logging.projects.logServices.sinks.create",
        "parameters": [
          {
            "description": "Part of `serviceName`. The name of the service in which to create a sink.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `serviceName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "logServicesId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1beta3/projects/{projectsId}/logServices/{logServicesId}/sinks/{sinksId}": {
      "delete": {
        "description": "Deletes the specified log service sink.",
        "operationId": "logging.projects.logServices.sinks.delete",
        "parameters": [
          {
            "description": "Part of `sinkName`. The name of the sink to delete.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "logServicesId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "sinksId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Gets the specified log service sink resource.",
        "operationId": "logging.projects.logServices.sinks.get",
        "parameters": [
          {
            "description": "Part of `sinkName`. The name of the sink to return.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "logServicesId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "sinksId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin",
              "https://www.googleapis.com/auth/logging.read"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "put": {
        "description": "Creates or update the specified log service sink resource.",
        "operationId": "logging.projects.logServices.sinks.update",
        "parameters": [
          {
            "description": "Part of `sinkName`. The name of the sink to update.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "logServicesId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "sinksId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1beta3/projects/{projectsId}/logs": {
      "get": {
        "description": "Lists log resources belonging to the specified project.",
        "operationId": "logging.projects.logs.list",
        "parameters": [
          {
            "description": "Part of `projectName`. The project name for which to list the log resources.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "A service name for which to list logs. Only logs containing entries whose metadata includes this service name are returned. If `serviceName` and `serviceIndexPrefix` are both empty, then all log names are returned. To list all log names, regardless of service, leave both the `serviceName` and `serviceIndexPrefix` empty. To list log names containing entries with a particular service name (or explicitly empty service name) set `serviceName` to the desired value and `serviceIndexPrefix` to `\"/\"`.",
            "in": "query",
            "name": "serviceName",
            "type": "string"
          },
          {
            "description": "A log service index prefix for which to list logs. Only logs containing entries whose metadata that includes these label values (associated with index keys) are returned. The prefix is a slash separated list of values, and need not specify all index labels. An empty index (or a single slash) matches all log service indexes.",
            "in": "query",
            "name": "serviceIndexPrefix",
            "type": "string"
          },
          {
            "description": "The maximum number of results to return.",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "An opaque token, returned as `nextPageToken` by a prior `ListLogs` operation. If `pageToken` is supplied, then the other fields of this request are ignored, and instead the previous `ListLogs` operation is continued.",
            "in": "query",
            "name": "pageToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ListLogsResponse"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin",
              "https://www.googleapis.com/auth/logging.read"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ]
    },
    "/v1beta3/projects/{projectsId}/logs/{logsId}": {
      "delete": {
        "description": "Deletes the specified log resource and all log entries contained in it.",
        "operationId": "logging.projects.logs.delete",
        "parameters": [
          {
            "description": "Part of `logName`. The log resource to delete.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `logName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "logsId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ]
    },
    "/v1beta3/projects/{projectsId}/logs/{logsId}/entries:write": {
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "post": {
        "description": "Creates one or more log entries in a log. You must supply a list of `LogEntry` objects, named `entries`. Each `LogEntry` object must contain a payload object and a `LogEntryMetadata` object that describes the entry. You must fill in all the fields of the entry, metadata, and payload. You can also supply a map, `commonLabels`, that supplies default (key, value) data for the `entries[].metadata.labels` maps, saving you the trouble of creating identical copies for each entry.",
        "operationId": "logging.projects.logs.entries.write",
        "parameters": [
          {
            "description": "Part of `logName`. The name of the log resource into which to insert the log entries.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `logName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "logsId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/WriteLogEntriesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/WriteLogEntriesResponse"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin",
              "https://www.googleapis.com/auth/logging.write"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1beta3/projects/{projectsId}/logs/{logsId}/sinks": {
      "get": {
        "description": "Lists log sinks associated with the specified log.",
        "operationId": "logging.projects.logs.sinks.list",
        "parameters": [
          {
            "description": "Part of `logName`. The log for which to list sinks.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `logName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "logsId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ListLogSinksResponse"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin",
              "https://www.googleapis.com/auth/logging.read"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "post": {
        "description": "Creates the specified log sink resource.",
        "operationId": "logging.projects.logs.sinks.create",
        "parameters": [
          {
            "description": "Part of `logName`. The log in which to create a sink resource.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `logName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "logsId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1beta3/projects/{projectsId}/logs/{logsId}/sinks/{sinksId}": {
      "delete": {
        "description": "Deletes the specified log sink resource.",
        "operationId": "logging.projects.logs.sinks.delete",
        "parameters": [
          {
            "description": "Part of `sinkName`. The name of the sink to delete.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "logsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "sinksId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Gets the specified log sink resource.",
        "operationId": "logging.projects.logs.sinks.get",
        "parameters": [
          {
            "description": "Part of `sinkName`. The name of the sink resource to return.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "logsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "sinksId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin",
              "https://www.googleapis.com/auth/logging.read"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "put": {
        "description": "Creates or updates the specified log sink resource.",
        "operationId": "logging.projects.logs.sinks.update",
        "parameters": [
          {
            "description": "Part of `sinkName`. The name of the sink to update.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "logsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "sinksId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1beta3/projects/{projectsId}/sinks": {
      "get": {
        "description": "Lists sinks associated with the specified project.",
        "operationId": "logging.projects.sinks.list",
        "parameters": [
          {
            "description": "Part of `projectName`. The name of the project for which to list sinks.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ListSinksResponse"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin",
              "https://www.googleapis.com/auth/logging.read"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "post": {
        "description": "Creates the specified sink resource.",
        "operationId": "logging.projects.sinks.create",
        "parameters": [
          {
            "description": "Part of `projectName`. The name of the project in which to create a sink.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1beta3/projects/{projectsId}/sinks/{sinksId}": {
      "delete": {
        "description": "Deletes the specified sink.",
        "operationId": "logging.projects.sinks.delete",
        "parameters": [
          {
            "description": "Part of `sinkName`. The name of the sink to delete.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "sinksId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Gets the specified sink resource.",
        "operationId": "logging.projects.sinks.get",
        "parameters": [
          {
            "description": "Part of `sinkName`. The name of the sink to return.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "sinksId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin",
              "https://www.googleapis.com/auth/logging.read"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "put": {
        "description": "Creates or update the specified sink resource.",
        "operationId": "logging.projects.sinks.update",
        "parameters": [
          {
            "description": "Part of `sinkName`. The name of the sink to update.",
            "in": "path",
            "name": "projectsId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Part of `sinkName`. See documentation of `projectsId`.",
            "in": "path",
            "name": "sinksId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LogSink"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/logging.admin"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    }
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "Oauth2": {
      "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
      "description": "Oauth 2.0 authentication",
      "flow": "implicit",
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": "View and manage your data across Google Cloud Platform services",
        "https://www.googleapis.com/auth/logging.admin": "Administrate log data for your projects",
        "https://www.googleapis.com/auth/logging.read": "View log data for your projects",
        "https://www.googleapis.com/auth/logging.write": "Submit log data for your projects"
      },
      "type": "oauth2"
    }
  },
  "swagger": "2.0"
}
