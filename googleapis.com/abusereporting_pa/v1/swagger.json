{
  "basePath": "/",
  "definitions": {
    "AbuseType": {
      "description": "Type of abuse being reported.",
      "properties": {
        "id": {
          "enum": [
            "ID_UNKNOWN",
            "CHILD_PORN",
            "PORNOGRAPHY",
            "SPAM",
            "PHISHING",
            "HATE",
            "TOS_OTHER",
            "MALWARE",
            "MALICIOUS_JAVASCRIPT",
            "IMPERSONATION",
            "PEDOPHILIA",
            "PERSONAL_INFO",
            "COPYRIGHT",
            "HIGH_RISK",
            "VIOLENCE",
            "UNSAFE_RACY",
            "UNSAFE_OTHER",
            "FAKE_USER",
            "NAME_VIOLATION",
            "PLUSONE_VIOLATION",
            "DEFAMATION",
            "TRADEMARK",
            "COURT_ORDER",
            "GOVERNMENT_ORDER",
            "LOCAL_LAWS",
            "PRIVACY",
            "HARASSMENT",
            "COMPROMISED",
            "LOW_QUALITY",
            "REGULATED",
            "SUICIDE",
            "THREAT",
            "HARASSMENT_OTHER",
            "UCCP_VIOLATION"
          ],
          "type": "string"
        },
        "subtype": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetConfigurationResponse": {
      "description": "Response message for `AbuseReporting.GetConfiguration`.",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/ReportAbuseConfig",
          "description": "Configuration that defines abuse reporting flow for the client f.e. arragement of reporting cards, abuse options, client specific actions."
        }
      },
      "type": "object"
    },
    "ReportAbuseAction": {
      "description": "A proto for specifying a report abuse flow action",
      "properties": {
        "actionName": {
          "description": "Name of this action, used to lookup which action was chosen. Each card will notify the parent component which action was chosen by passing back an event with the name of the selected action. Also, used by a selected option to determine which additional actions to show. Each option has a list of action names to show if it is chosen.",
          "type": "string"
        },
        "actionTemplate": {
          "enum": [
            "UNKNOWN_ACTION_TEMPLATE",
            "UNDO_BUTTON",
            "REQUEST_REMOVAL_BUTTON",
            "REMOVE_CIRCLES_BUTTON",
            "BLOCK_BUTTON",
            "MUTE_BUTTON",
            "NO_ADDITIONAL_ACTION_BUTTON",
            "UNICORN_UNDO_BUTTON",
            "UNICORN_REQUEST_REMOVAL_BUTTON",
            "UNICORN_REMOVE_CIRCLES_BUTTON",
            "UNICORN_BLOCK_BUTTON",
            "UNICORN_MUTE_BUTTON",
            "UNICORN_NO_ACTION_BUTTON",
            "FINISH_REPORTING_BUTTON",
            "UNICORN_FINISH_REPORTING_BUTTON",
            "ERROR_BUTTON"
          ],
          "type": "string"
        },
        "actionText": {
          "description": "Rendered text for this action.",
          "type": "string"
        },
        "clientAction": {
          "enum": [
            "UNKNOWN_CLIENT_ACTION",
            "UNDO",
            "TAKE_NO_ACTION",
            "OZ_REQUEST_TAKEDOWN_POST",
            "OZ_REQUEST_TAKEDOWN_PHOTO",
            "OZ_BLOCK_USER",
            "OZ_MUTE_USER",
            "OZ_REMOVE_CIRCLES",
            "HANGOUTS_BLOCK_USER"
          ],
          "type": "string"
        },
        "requirements": {
          "description": "Requirements for this action to be shown. Not all actions apply in all situations (remove from circles is silly if the other person isn't in your circles to begin with). Fulfilled requirements are passed in as part of widget instantiation.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReportAbuseConfig": {
      "properties": {
        "actions": {
          "items": {
            "$ref": "#/definitions/ReportAbuseAction"
          },
          "type": "array"
        },
        "messages": {
          "items": {
            "$ref": "#/definitions/ReportAbuseMessage"
          },
          "type": "array"
        },
        "options": {
          "items": {
            "$ref": "#/definitions/ReportAbuseOption"
          },
          "type": "array"
        },
        "strings": {
          "items": {
            "$ref": "#/definitions/ReportAbuseMiscString"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReportAbuseMessage": {
      "properties": {
        "confirmRequired": {
          "description": "Whether the user must confirm they have read the message for their abuse report to be submitted.",
          "type": "boolean"
        },
        "externalNavigation": {
          "description": "An optional url to direct the user to after they have read the message, for instance the copyright takedown form.",
          "type": "string"
        },
        "messageName": {
          "description": "Name of this message, if an option is selected which has an additional message to be shown, the component will lookup by message name to find the appropriate message object to show.",
          "type": "string"
        },
        "messageTemplate": {
          "enum": [
            "UNKNOWN_MESSAGE_TEMPLATE",
            "COPYRIGHT_EXPLANATION",
            "CONTACT_AUTHORITIES",
            "COMPROMISED",
            "REPORTING_FINISHED",
            "UNICORN_COPYRIGHT_EXPLANATION",
            "UNICORN_CONTACT_AUTHORITIES",
            "UNICORN_COMPROMISED",
            "UNICORN_REPORTING_FINISHED",
            "IMPERSONATION_OTHER",
            "UCCP_EXPLANATION"
          ],
          "type": "string"
        },
        "messageText": {
          "description": "Rendered text for this message.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReportAbuseMiscString": {
      "properties": {
        "stringTemplate": {
          "enum": [
            "UNKNOWN_STRING_TEMPLATE",
            "REPORT_ABUSE_HEADER",
            "BACK_BUTTON",
            "CANCEL_BUTTON",
            "SUBMIT_BUTTON",
            "OKAY_BUTTON",
            "INITIAL_HEADER",
            "ADDITIONAL_ACTIONS_HEADER",
            "UNDO_HEADER",
            "ADDITIONAL_MESSAGE_HEADER",
            "ADDITIONAL_ACTIONS_NO_REPORT_HEADER",
            "ADDITIONAL_MESSAGE_NO_REPORT_HEADER",
            "ADDITIONAL_MESSAGE_PENDING_REPORT_HEADER",
            "CONTENT_HIDDEN_HEADER",
            "ERROR_HEADER",
            "UNDO_BUTTON",
            "FINISH_REPORTING_BUTTON",
            "ERROR_BUTTON",
            "NO_ADDITIONAL_ACTION_BUTTON"
          ],
          "type": "string"
        },
        "stringText": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReportAbuseOption": {
      "description": "A proto for specifying a report abuse flow option.",
      "properties": {
        "abuseType": {
          "$ref": "#/definitions/AbuseType",
          "description": "Type of abuse, if applicable."
        },
        "additionalActions": {
          "description": "Additional actions, if applicable.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "headerText": {
          "description": "Rendered text for this option's subtype header, if applicable.",
          "type": "string"
        },
        "messageName": {
          "description": "Message to show for this option.",
          "type": "string"
        },
        "noReport": {
          "description": "Whether to send a report to AIA.",
          "type": "boolean"
        },
        "optionName": {
          "description": "Name of this option, used to lookup which option is chosen. Each card will notify the parent component which option was chosen by passing back an event with the name of the selected option.",
          "type": "string"
        },
        "optionText": {
          "description": "Rendered text for this option.",
          "type": "string"
        },
        "subtypeHeaderTemplate": {
          "description": "If this option has subtypes, which header to show for the next card.",
          "enum": [
            "UNKNOWN_HEADER_TEMPLATE",
            "INITIAL_HEADER",
            "SOMETHING_ELSE_HEADER",
            "PORN_SUBTYPE_HEADER",
            "HARASSMENT_SUBTYPE_HEADER",
            "VIOLENCE_SUBTYPE_HEADER",
            "ADDITIONAL_ACTIONS_HEADER",
            "UNDO_HEADER",
            "ADDITIONAL_MESSAGE_HEADER",
            "ADDITIONAL_ACTIONS_NO_REPORT_HEADER",
            "ADDITIONAL_MESSAGE_NO_REPORT_HEADER",
            "ADDITIONAL_MESSAGE_PENDING_REPORT_HEADER",
            "CONTENT_HIDDEN_HEADER",
            "UNICORN_INITIAL_HEADER",
            "UNICORN_SOMETHING_ELSE_HEADER",
            "UNICORN_PORN_SUBTYPE_HEADER",
            "UNICORN_HARASSMENT_SUBTYPE_HEADER",
            "UNICORN_VIOLENCE_SUBTYPE_HEADER",
            "UNICORN_ADDITIONAL_ACTIONS_HEADER",
            "UNICORN_UNDO_HEADER",
            "UNICORN_ADDITIONAL_MESSAGE_HEADER",
            "UNICORN_ADDITIONAL_ACTIONS_NO_REPORT_HEADER",
            "UNICORN_ADDITIONAL_MESSAGE_NO_REPORT_HEADER",
            "UNICORN_ADDITIONAL_MESSAGE_PENDING_REPORT_HEADER",
            "UNICORN_CONTENT_HIDDEN_HEADER",
            "ERROR_HEADER",
            "PROFILE_IMPERSONATION_SUBTYPE_HEADER",
            "PROFILE_UCCP_SUBTYPE_HEADER"
          ],
          "type": "string"
        },
        "subtypes": {
          "description": "Which options to use for the next card.",
          "items": {
            "$ref": "#/definitions/ReportAbuseOption"
          },
          "type": "array"
        },
        "template": {
          "description": "What text for the button.",
          "enum": [
            "UNKNOWN_OPTION_TEMPLATE",
            "SPAM_BUTTON",
            "PORN_BUTTON",
            "VIOLENCE_BUTTON",
            "SOMETHING_ELSE_BUTTON",
            "INAPPROPRIATE_CONTENT_BUTTON",
            "HATE_BUTTON",
            "HARASSMENT_BUTTON",
            "DISLIKE_BUTTON",
            "SUICIDE_BUTTON",
            "THREAT_BUTTON",
            "PEDO_BUTTON",
            "HARASSMENT_OTHER_BUTTON",
            "COPYRIGHT_BUTTON",
            "PORN_SUBTYPE_BUTTON",
            "HARASSMENT_SUBTYPE_BUTTON",
            "VIOLENCE_SUBTYPE_BUTTON",
            "COMPROMISED_BUTTON",
            "IMPERSONATION_BUTTON",
            "NOT_INDIVIDUAL_BUTTON",
            "UCCP_BUTTON",
            "CUSTOM_URL_BUTTON",
            "UNICORN_SPAM_BUTTON",
            "UNICORN_PORN_BUTTON",
            "UNICORN_VIOLENCE_BUTTON",
            "UNICORN_SOMETHING_ELSE_BUTTON",
            "UNICORN_INAPPROPRIATE_CONTENT_BUTTON",
            "UNICORN_HATE_BUTTON",
            "UNICORN_HARASSMENT_BUTTON",
            "UNICORN_DISLIKE_BUTTON",
            "UNICORN_SUICIDE_BUTTON",
            "UNICORN_THREAT_BUTTON",
            "UNICORN_PEDO_BUTTON",
            "UNICORN_HARASSMENT_OTHER_BUTTON",
            "UNICORN_COPYRIGHT_BUTTON",
            "UNICORN_PORN_SUBTYPE_BUTTON",
            "UNICORN_HARASSMENT_SUBTYPE_BUTTON",
            "UNICORN_VIOLENCE_SUBTYPE_BUTTON",
            "PROFILE_IMPERSONATION_ME_BUTTON",
            "PROFILE_IMPERSONATION_OTHER_BUTTON",
            "PROFILE_IMPERSONATION_CELEBRITY_BUTTON",
            "PROFILE_NO_REPORT_BUTTON",
            "REGULATED_BUTTON"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReportAbuseRequest": {
      "description": "Request message for `AbuseReporting.ReportAbuse`.",
      "properties": {
        "abuseType": {
          "$ref": "#/definitions/AbuseType",
          "description": "What type of abuse is being reported."
        },
        "configName": {
          "description": "Configuration name used to create reporting flow.",
          "enum": [
            "CONFIG_NAME_UNKNOWN",
            "ABUSEIAM_TESTING",
            "GOOGLE_PLUS_POST_WEB",
            "GOOGLE_PLUS_COMMENT_WEB",
            "GOOGLE_PLUS_PROFILE_WEB",
            "GOOGLE_PLUS_PROFILE_WEB_NEW"
          ],
          "type": "string"
        },
        "reportedContent": {
          "description": "String representation of content being reported, if applicable.",
          "type": "string"
        },
        "reportedItemId": {
          "description": "Id of the content being reported.",
          "type": "string"
        },
        "reporter": {
          "$ref": "#/definitions/Reporter",
          "description": "How we are identifying the user reporting abuse."
        },
        "timestampMicros": {
          "description": "When user reported abuse.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReportAbuseResponse": {
      "description": "Response message for `AbuseReporting.ReportAbuse`.",
      "properties": {
        "reportId": {
          "description": "Identifier of submitted response. It can be used to undo it.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Reporter": {
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "enum": [
            "UNKNOWN",
            "GAIA",
            "OBFUSCATED_GAIA"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "UndoReportAbuseRequest": {
      "description": "Request message for `AbuseReporting.UndoReportAbuse`.",
      "properties": {
        "reportId": {
          "description": "Identifier of submitted response returned by ReportAbuse method.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UndoReportAbuseResponse": {
      "description": "Response message for `AbuseReporting.UndoReportAbuse`.",
      "type": "object"
    }
  },
  "host": "abusereporting-pa.googleapis.com",
  "info": {
    "contact": {
      "name": "Google",
      "url": "https://google.com"
    },
    "description": "Internal API for delivering user reports to AbuseIAm servers.",
    "title": "Abuse Reporting API",
    "version": "v1",
    "x-logo": "https://www.google.com/images/srpr/logo11w.png",
    "x-origin": {
      "format": "google",
      "url": "https://www.googleapis.com/discovery/v1/apis/abusereporting_pa/v1/rest",
      "version": "v1"
    },
    "x-preferred": true,
    "x-providerName": "googleapis.com",
    "x-serviceName": "abusereporting_pa"
  },
  "parameters": {
    "$.xgafv": {
      "description": "V1 error format.",
      "in": "query",
      "name": "$.xgafv",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "in": "query",
      "name": "access_token",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "description": "Data format for response.",
      "in": "query",
      "name": "alt",
      "type": "string"
    },
    "bearer_token": {
      "description": "OAuth bearer token.",
      "in": "query",
      "name": "bearer_token",
      "type": "string"
    },
    "callback": {
      "description": "JSONP",
      "in": "query",
      "name": "callback",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "in": "query",
      "name": "fields",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "in": "query",
      "name": "key",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "in": "query",
      "name": "oauth_token",
      "type": "string"
    },
    "pp": {
      "default": true,
      "description": "Pretty-print response.",
      "in": "query",
      "name": "pp",
      "type": "boolean"
    },
    "prettyPrint": {
      "default": true,
      "description": "Returns response with indentations and line breaks.",
      "in": "query",
      "name": "prettyPrint",
      "type": "boolean"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "in": "query",
      "name": "quotaUser",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "in": "query",
      "name": "uploadType",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "in": "query",
      "name": "upload_protocol",
      "type": "string"
    }
  },
  "paths": {
    "/v1/configuration/{configName}": {
      "get": {
        "description": "Method returns reporting flow configuration for registered client.",
        "operationId": "abusereporting_pa.configuration.get",
        "parameters": [
          {
            "description": "Specific configuration for the client.",
            "enum": [
              "CONFIG_NAME_UNKNOWN",
              "ABUSEIAM_TESTING",
              "GOOGLE_PLUS_POST_WEB",
              "GOOGLE_PLUS_COMMENT_WEB",
              "GOOGLE_PLUS_PROFILE_WEB",
              "GOOGLE_PLUS_PROFILE_WEB_NEW"
            ],
            "in": "path",
            "name": "configName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Language of the user. For example 'ru' or 'en_US'. If not provided returns default English translation.",
            "in": "query",
            "name": "language",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/GetConfigurationResponse"
            }
          }
        },
        "tags": [
          "configuration"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ]
    },
    "/v1:report_abuse": {
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "post": {
        "description": "Method to call when user selected one of abuse options.",
        "operationId": "abusereporting_pa.report_abuse",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ReportAbuseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ReportAbuseResponse"
            }
          }
        },
        "tags": [
          "v1"
        ]
      }
    },
    "/v1:undo_report_abuse": {
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "post": {
        "description": "Method to call when user wants to undo previous ReportAbuse operation.",
        "operationId": "abusereporting_pa.undo_report_abuse",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UndoReportAbuseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/UndoReportAbuseResponse"
            }
          }
        },
        "tags": [
          "v1"
        ]
      }
    }
  },
  "schemes": [
    "https"
  ],
  "swagger": "2.0"
}
